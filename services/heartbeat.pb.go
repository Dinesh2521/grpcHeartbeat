// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heartbeat.proto

package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// proto spec for the heartbeat
type HeartbeatMsg struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsRunning            bool     `protobuf:"varint,3,opt,name=isRunning,proto3" json:"isRunning,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatMsg) Reset()         { *m = HeartbeatMsg{} }
func (m *HeartbeatMsg) String() string { return proto.CompactTextString(m) }
func (*HeartbeatMsg) ProtoMessage()    {}
func (*HeartbeatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_heartbeat_3c371535800818ae, []int{0}
}
func (m *HeartbeatMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatMsg.Unmarshal(m, b)
}
func (m *HeartbeatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatMsg.Marshal(b, m, deterministic)
}
func (dst *HeartbeatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatMsg.Merge(dst, src)
}
func (m *HeartbeatMsg) XXX_Size() int {
	return xxx_messageInfo_HeartbeatMsg.Size(m)
}
func (m *HeartbeatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatMsg proto.InternalMessageInfo

func (m *HeartbeatMsg) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HeartbeatMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *HeartbeatMsg) GetIsRunning() bool {
	if m != nil {
		return m.IsRunning
	}
	return false
}

func (m *HeartbeatMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs.
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_heartbeat_3c371535800818ae, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HeartbeatMsg)(nil), "services.HeartbeatMsg")
	proto.RegisterType((*Empty)(nil), "services.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartbeatClient is the client API for Heartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartbeatClient interface {
	GetHeartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatMsg, error)
}

type heartbeatClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeatClient(cc *grpc.ClientConn) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) GetHeartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HeartbeatMsg, error) {
	out := new(HeartbeatMsg)
	err := c.cc.Invoke(ctx, "/services.Heartbeat/getHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatServer is the server API for Heartbeat service.
type HeartbeatServer interface {
	GetHeartbeat(context.Context, *Empty) (*HeartbeatMsg, error)
}

func RegisterHeartbeatServer(s *grpc.Server, srv HeartbeatServer) {
	s.RegisterService(&_Heartbeat_serviceDesc, srv)
}

func _Heartbeat_GetHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).GetHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Heartbeat/GetHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).GetHeartbeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getHeartbeat",
			Handler:    _Heartbeat_GetHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat.proto",
}

func init() { proto.RegisterFile("heartbeat.proto", fileDescriptor_heartbeat_3c371535800818ae) }

var fileDescriptor_heartbeat_3c371535800818ae = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x48, 0x4d, 0x2c,
	0x2a, 0x49, 0x4a, 0x4d, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x4e, 0x2d,
	0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0x56, 0x6a, 0x63, 0xe4, 0xe2, 0xf1, 0x80, 0xc9, 0xfa, 0x16, 0xa7,
	0x0b, 0x29, 0x70, 0x71, 0x43, 0x25, 0xfd, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0x90, 0x85, 0x84, 0x64, 0xb8, 0x38, 0x4b, 0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b,
	0x24, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0x10, 0x02, 0x20, 0xd9, 0xcc, 0xe2, 0xa0, 0xd2, 0xbc,
	0xbc, 0xcc, 0xbc, 0x74, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x84, 0x80, 0x90, 0x04, 0x17,
	0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0xaa, 0x04, 0x0b, 0xd8, 0x64, 0x18, 0x57, 0x89, 0x9d,
	0x8b, 0xd5, 0x35, 0xb7, 0xa0, 0xa4, 0xd2, 0xc8, 0x8d, 0x8b, 0x13, 0xee, 0x20, 0x21, 0x4b, 0x2e,
	0x9e, 0xf4, 0xd4, 0x12, 0x04, 0x9f, 0x5f, 0x0f, 0xe6, 0x72, 0x3d, 0xb0, 0x6a, 0x29, 0x31, 0x84,
	0x00, 0xb2, 0x37, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x5e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x68, 0xed, 0x43, 0x8a, 0xfd, 0x00, 0x00, 0x00,
}
